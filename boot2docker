#!/usr/bin/env sh

#Load the user's profile and then default any remaining values
: ${BOOT2DOCKER_CFG_DIR:=${HOME}/.boot2docker}
: ${BOOT2DOCKER_PROFILE:=${BOOT2DOCKER_CFG_DIR}/profile}
test -f "$BOOT2DOCKER_PROFILE" && . "$BOOT2DOCKER_PROFILE"
: ${VM_NAME:=boot2docker-vm}
: ${VBM:=VBoxManage}

: ${DOCKER_PORT:=4243}
: ${SSH_HOST_PORT:=2022}

: ${VM_DISK_SIZE:=40000}
: ${VM_MEM:=1024}

: ${VM_DISK:=${BOOT2DOCKER_CFG_DIR}/${VM_NAME}.vmdk}
: ${BOOT2DOCKER_ISO:=${BOOT2DOCKER_CFG_DIR}/boot2docker.iso}

: ${BOOT2DOCKER_HOST_NAME:=docker}
: ${BOOT2DOCKER_HOST_IP:=192.168.59.1}
: ${BOOT2DOCKER_DHCP_IP:=192.168.59.100}
: ${BOOT2DOCKER_NetworkMask:=255.255.255.0}
: ${BOOT2DOCKER_lowerIPAddress:=192.168.59.101}
: ${BOOT2DOCKER_upperIPAddress:=192.168.59.254}
: ${BOOT2DOCKER_DHCP_Enabled:=Yes}

#Check if all required commands exist
cmd_exists() {
    while [ -n "$1" ]
    do
        command -v $1 >/dev/null 2>&1 || { echo >&2 "command '$1' is required but not installed.  Aborting."; notOK=1; [[ "$1" == "$VBM" ]] && echo "You need to install VirtualBox https://www.virtualbox.org!"; }
        shift
    done
    [ -n "$notOK" ] && exit 1
}
cmd_exists bc nc curl grep head tr $VBM

mkdir -p "${BOOT2DOCKER_CFG_DIR}"

unamestr=`uname`

get_latest_release_name() {
    local LRN
    LRN=$(curl 'https://api.github.com/repos/boot2docker/boot2docker/releases' 2>/dev/null|grep -o -m 1 -e "\"tag_name\":[[:space:]]*\"[a-z0-9.]*\""|head -1|cut -d: -f2|tr -d ' "')
    if [ -z "$LRN" ]; then
        echo "ERROR"
    else
        echo "$LRN"
    fi
}

download_latest() {
    LATEST_RELEASE=$(get_latest_release_name)
    if [ ! "$LATEST_RELEASE" = "ERROR" ]; then
        log "Latest version is $LATEST_RELEASE, downloading..."
        mkdir -p "${BOOT2DOCKER_ISO%/*}"
        curl -L -o "$BOOT2DOCKER_ISO" "https://github.com/boot2docker/boot2docker/releases/download/$LATEST_RELEASE/boot2docker.iso"
        log "Done"
    else
        log "Could not get latest release name! Cannot download boot2docker.iso."
    fi
}

log() {
    echo "[`date +"%Y-%m-%d %H:%M:%S"`] ${*}"
}

get_hostonlyif_name() {
    DS=""
    $VBM list hostonlyifs | while read LINE; do
        if [ -z "$LINE" ]; then
            if [[ $DS =~ (.*),.*,.*,$BOOT2DOCKER_HOST_IP,$BOOT2DOCKER_NetworkMask,.* ]]; then
                IFNAME="${BASH_REMATCH[1]}"
                if [[ "$IFNAME" == "$(get_dhcpserver_name $IFNAME)" ]]; then
                    echo "$IFNAME"
                    return 0
                else
                    log "Found interface \"$IFNAME\" with wrong DHCP Settings!"
                    echo "$IFNAME" 
                    return 1
                fi
            fi
            DS=""
        else
            if [[ $LINE =~ .*:[[:space:]]+(.*) ]]; then
                if [ -n "$DS" ]; then
                    DS="$DS,"
                fi
                DS="$DS${BASH_REMATCH[1]}"
            fi
        fi
    done
}

get_dhcpserver_name() {
    IFNAME="$1"
    DS=""
    $VBM list dhcpservers | while read LINE; do
        if [ -z "$LINE" ]; then
            if [[ $DS =~ HostInterfaceNetworking-$IFNAME,$BOOT2DOCKER_DHCP_IP,$BOOT2DOCKER_NetworkMask,$BOOT2DOCKER_lowerIPAddress,$BOOT2DOCKER_upperIPAddress,$BOOT2DOCKER_DHCP_Enabled ]]; then
                echo "$IFNAME"
                break
            fi
            DS=""
        else
            if [[ $LINE =~ .*:[[:space:]]+(.*) ]]; then
                if [ -n "$DS" ]; then
                    DS="$DS,"
                fi
                DS="$DS${BASH_REMATCH[1]}"
            fi
        fi
    done 
}

create_hostonlyif() {
    IFNAME=$(get_hostonlyif_name)
    IFNAME_ERROR=$?
    if [[ "$IFNAME_ERROR" == "1" ]]; then # Wrong DHCP Setting
        echo "Found interface \"$IFNAME\" with wrong DHCP settings!"
        if ask "Would you like to reset it? (Y/N) " N ; then
            $VBM dhcpserver modify \
                --ifname $IFNAME \
                --ip $BOOT2DOCKER_DHCP_IP \
                --netmask $BOOT2DOCKER_NetworkMask \
                --lowerip $BOOT2DOCKER_lowerIPAddress \
                --upperip $BOOT2DOCKER_upperIPAddress \
                --enable
        else
            log "Failed to update host only interface with DHCP settings!"
            exit 1
        fi
    fi
    if [[ -z "$IFNAME" ]]; then
        OUTPUT=$($VBM hostonlyif create)
        if [[ $OUTPUT =~ Interface[[:space:]]\'(.*)\'.* ]]; then
            IFNAME="${BASH_REMATCH[1]}"
            $VBM hostonlyif ipconfig $IFNAME \
                --ip $BOOT2DOCKER_HOST_IP \
                --netmask $BOOT2DOCKER_NetworkMask
        else
            log "Failed to create host only interface!"
            exit 1
        fi
        $VBM dhcpserver add \
            --ifname $IFNAME \
            --ip $BOOT2DOCKER_DHCP_IP \
            --netmask $BOOT2DOCKER_NetworkMask \
            --lowerip $BOOT2DOCKER_lowerIPAddress \
            --upperip $BOOT2DOCKER_upperIPAddress \
            --enable
    fi
    echo "$IFNAME"
}

ask() {
    while true; do
 
        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi
 
        # Ask the question
        read -p "$1 [$prompt] " REPLY
 
        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi
 
        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
 
    done
}

mod_bashprofile() {
    grep -q "export DOCKER_HOST=" $HOME/.bash_profile
    if [[ "$?" == "1" ]]; then
        log "add 'export DOCKER_HOST=tcp://localhost:$DOCKER_PORT' to $HOME/.bash_profile"
        sed -i .bak -E '/(export DOCKER_HOST=|docker.io)/d' $HOME/.bash_profile; 
        echo "\n### docker.io" >> $HOME/.bash_profile
        echo "export DOCKER_HOST=tcp://localhost:$DOCKER_PORT" >> $HOME/.bash_profile
        . $HOME/.bash_profile
    fi
}

mod_hosts() {

    DOCKER_HOST_IP=$(do_ssh ifconfig eth1 | awk '/inet addr/ {split ($2,A,":"); print A[2]}')

    grep -q "$DOCKER_HOST_IP\s\+$BOOT2DOCKER_HOST_NAME" /etc/hosts
    if [[ "$?" == "1" ]]; then
        log "add '$BOOT2DOCKER_HOST_NAME $DOCKER_HOST_IP' to /etc/hosts"

        MHD_HD_EXPORT_CMD="sudo sed -i .bak -E '/$BOOT2DOCKER_HOST_NAME/d' /etc/hosts; sudo echo \"$DOCKER_HOST_IP $BOOT2DOCKER_HOST_NAME\" >> /etc/hosts"
        if [[ "$unamestr" == "Darwin" ]]; then
            MHD_HD_EXPORT_CMD="$MHD_HD_EXPORT_CMD; sudo killall -HUP mDNSResponder";
        fi
        sudo -v
        if [[ "$?" == "1" ]] && [[ "$unamestr" == "Darwin" ]]; then
            MHD_HD_EXPORT_CMD_TMP=$(mktemp -t b2d)
            echo $MHD_HD_EXPORT_CMD > $MHD_HD_EXPORT_CMD_TMP
            osascript -e "do shell script \"sh $MHD_HD_EXPORT_CMD_TMP\" with administrator privileges"
            rm $MHD_HD_EXPORT_CMD_TMP
        else
            $MHD_HD_EXPORT_CMD
        fi
    fi
}

init() {

    if `$VBM showvminfo $VM_NAME > /dev/null 2>&1`; then
        echo "$VM_NAME Virtual Box vm already exists"
        exit 1
    fi

    VM_OSTYPE=Linux26_64
    VM_NIC=virtio

    case $unamestr in
        Linux) VM_CPUS=`nproc`;;
        Darwin) VM_CPUS=`sysctl -n hw.physicalcpu`;;
        *) echo "$unamestr not yet supported - please raise an issue" ; exit 1
    esac

    if `nc -z -w2 localhost $DOCKER_PORT > /dev/null` ; then
        log "DOCKER_PORT=$DOCKER_PORT on localhost is used by an other process! Set the DOCKER_PORT in $BOOT2DOCKER_PROFILE free port."
        exit 1
    fi

    if `nc -z -w2 localhost $SSH_HOST_PORT > /dev/null` ; then
        log "SSH_HOST_PORT=$SSH_HOST_PORT on localhost is used by an other process! Set the SSH_HOST_PORT in $BOOT2DOCKER_PROFILE free port."
        exit 1
    fi

    log "Creating VM $VM_NAME"
    $VBM createvm --name $VM_NAME --register
    log "Apply interim patch to VM $VM_NAME (https://www.virtualbox.org/ticket/12748)"
    $VBM setextradata $VM_NAME VBoxInternal/CPUM/EnableHVP 1
    
    log "Setting VM settings"
    TXUX_SUPPORT=""
    if $($VBM modifyvm|grep -q "\-\-vtxux"); then
        TXUX_SUPPORT="--vtxux on"
    fi

    if ! $VBM modifyvm $VM_NAME \
        --ostype $VM_OSTYPE \
        --cpus $VM_CPUS \
        --memory $VM_MEM \
        --rtcuseutc on \
        --acpi on \
        --ioapic on \
        --hpet on \
        --hwvirtex on \
        --vtxvpid on \
        $TXUX_SUPPORT \
        --largepages on \
        --nestedpaging on \
        --firmware bios \
        --bioslogofadein off --bioslogofadeout off --bioslogodisplaytime 0 --biosbootmenu disabled \
        --boot1 dvd; then
      echo "An error occured, upgrade VirtualBox or try to disable some options"
      delete
      exit 1
    fi

    log "Setting VM networking"
    $VBM modifyvm $VM_NAME \
        --nic1 nat \
        --nictype1 $VM_NIC \
        --cableconnected1 on
    if `$VBM showvminfo $VM_NAME | grep Rule | grep ssh > /dev/null`; then
        $VBM modifyvm $VM_NAME \
            --natpf1 delete "ssh"
    fi
    if `$VBM showvminfo $VM_NAME | grep Rule | grep docker > /dev/null`; then
        $VBM modifyvm $VM_NAME \
            --natpf1 delete "docker"
    fi
    IFNAME2=$(create_hostonlyif)
    $VBM modifyvm $VM_NAME \
        --nic2 hostonly \
        --hostonlyadapter2 $IFNAME2 \
        --nictype2 $VM_NIC \
        --cableconnected2 on
    $VBM modifyvm $VM_NAME \
        --natpf1 "ssh,tcp,127.0.0.1,$SSH_HOST_PORT,,22" \
        --natpf1 "docker,tcp,127.0.0.1,$DOCKER_PORT,,4243"

    if [ ! -e "$BOOT2DOCKER_ISO" ]; then
        log "boot2docker.iso not found."
        download_latest
    fi

    log "Setting VM disks"
    if `$VBM showvminfo $VM_NAME | grep SATA > /dev/null`; then
        $VBM storagectl $VM_NAME --name "SATA" --remove
    fi

    if [ ! -e "$VM_DISK" ]; then
        log "Creating $VM_DISK_SIZE Meg hard drive..."
        echo "boot2docker, please format-me" | $VBM convertfromraw stdin "$VM_DISK" $(echo "$VM_DISK_SIZE * 1024 * 1024" | bc) --format VMDK
    fi

    $VBM storagectl $VM_NAME --name "SATA" --add sata --hostiocache on
    $VBM storageattach $VM_NAME --storagectl "SATA" --port 0 --device 0 --type dvddrive --medium "$BOOT2DOCKER_ISO"
    $VBM storageattach $VM_NAME --storagectl "SATA" --port 1 --device 0 --type hdd --medium "$VM_DISK"

    log "Done."
    log "You can now type boot2docker up and wait for the VM to start."
}

do_ssh() {
    is_installed || status
    ssh -o StrictHostKeyChecking=no -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -p $SSH_HOST_PORT docker@localhost $*
}

start() {
    is_installed || status
    if ! is_running; then
        if is_paused; then
            log "Resuming $VM_NAME"
            $VBM controlvm $VM_NAME resume > /dev/null
            wait_vm
            log "Resumed."
        else
            log "Starting $VM_NAME..."
            $VBM startvm $VM_NAME --type headless > /dev/null &
            wait_vm
            mod_hosts
            mod_bashprofile
            log "Started."
        fi
    else
        log "$VM_NAME is already running."
    fi

    if [ "$DOCKER_HOST" != "tcp://localhost:${DOCKER_PORT}" ]; then
        echo
        echo "To connect the docker client to the Docker daemon, please set:"
        echo "export DOCKER_HOST=tcp://localhost:${DOCKER_PORT}"
        echo
    fi
}

wait_vm() {
    while ! echo "ping" | nc localhost $SSH_HOST_PORT > /dev/null 2>&1; do
        sleep 1
    done
}

suspend() {
    is_installed || status
    if is_running; then
        log "Suspending $VM_NAME..."
        $VBM controlvm $VM_NAME savestate > /dev/null
    else
        log "$VM_NAME is not running."
    fi
}

stop() {
    is_installed || status
    if is_running; then
        log "Shutting down $VM_NAME..."
        $VBM controlvm $VM_NAME acpipowerbutton > /dev/null
        while is_running; do
            sleep 1
        done
    else
        log "$VM_NAME is not running."
    fi
}

restart() {
    is_installed || status
    if is_running; then
        stop && sleep 1 && start
    else
        start
    fi
}

info() {
    if is_installed; then
        $VBM showvminfo $VM_NAME
    else
        echo "$VM_NAME does not exist."
    fi
}

is_installed() {
    $VBM list vms | grep "$VM_NAME" > /dev/null
}

is_running() {
    info | grep -E "State:[ ]+running" > /dev/null
}

is_paused() {
    info | grep -E "State:[ ]+paused" > /dev/null
}

is_saved() {
    info | grep -E "State:[ ]+saved" > /dev/null
}

is_suspended() {
    info | grep -E "State:[ ]+suspended" > /dev/null
}

is_stopped() {
    info | grep -E "State:[ ]+powered off" > /dev/null
}

is_aborted() {
    info | grep -E "State:[ ]+aborted" > /dev/null
}

status() {
    if is_running; then
        log "$VM_NAME is running."
        exit 0
    elif is_paused; then
        log "$VM_NAME is paused."
        exit 1
    elif is_saved; then
        log "$VM_NAME is saved."
        exit 1
    elif is_suspended; then
        log "$VM_NAME is suspended."
        exit 1
    elif is_stopped; then
        log "$VM_NAME is stopped."
        exit 1
    elif is_aborted; then
        log "$VM_NAME is aborted."
        exit 1
    else
        log "$VM_NAME does not exist."
        exit 1
    fi
}

delete() {
    if [ ! is_stopped ] || [ ! is_aborted ]; then
        log "$VM_NAME needs to be stopped to delete it."
        exit 1
    fi
    $VBM unregistervm --delete $VM_NAME
}

case $1 in
    init | setup) init;;
    start | up) start;;
    save | pause | suspend) suspend;;
    stop | halt | down) stop;;
    restart) restart;;
    status) status;;
    info) info;;
    delete) delete;;
    ssh) shift; do_ssh "$@";;
    download) download_latest;;
    *) echo "Usage $0 {init|start|up|save|pause|stop|restart|status|info|delete|ssh|download}"; exit 1
esac
