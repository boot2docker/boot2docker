#!/bin/sh
VM_NAME=boot2docker-vm
VBM=VBoxManage

DOCKER_PORT=4243
SSH_HOST_PORT=2022

get_latest_release_name() {
    curl 'https://api.github.com/repos/steeve/boot2docker/releases' 2>/dev/null | grep "tag_name" | awk '{print $2}' | sed 's/[",]*//g' | head -1
}

download_latest() {
    LATEST_RELEASE=`get_latest_release_name`
    log "Latest version is $LATEST_RELEASE, downloading..."
    curl -L -o boot2docker.iso "https://github.com/steeve/boot2docker/releases/download/$LATEST_RELEASE/boot2docker.iso"
    log "Done"
}

log() {
    echo "[`date +"%Y-%m-%d %H:%M:%S"`] ${*}"
}

init() {

    if `$VBM showvminfo $VM_NAME > /dev/null 2>&1`; then
	    echo "$VM_NAME Virtual Box vm already exists"
	    exit 1
    fi

    VM_MEM=1024
    VM_OSTYPE=Linux26_64
    VM_NIC=82540EM
    VM_DISK=./boot2docker.vmdk
    VM_DISK_SIZE=40000
    unamestr=`uname`
    case $unamestr in
        Linux) VM_CPUS=`nproc`;;
        Darwin) VM_CPUS=`sysctl -n hw.physicalcpu`;;
        *) echo "$unamestr not yet supported - please raise an issue" ; exit 1
    esac
    BOOT2DOCKER_ISO=./boot2docker.iso

    log "Creating VM $VM_NAME"
    $VBM createvm --name $VM_NAME --register

    log "Setting VM settings"
    $VBM modifyvm $VM_NAME \
        --ostype $VM_OSTYPE \
        --cpus $VM_CPUS \
        --memory $VM_MEM \
        --rtcuseutc on \
        --acpi on \
        --ioapic on \
        --hpet on \
        --hwvirtex on \
        --firmware bios \
        --bioslogofadein off --bioslogofadeout off --bioslogodisplaytime 0 --biosbootmenu disabled \
        --boot1 dvd

    log "Setting VM networking"
    $VBM modifyvm $VM_NAME \
        --nic1 nat \
        --nictype1 $VM_NIC \
        --cableconnected1 on
    if `$VBM showvminfo $VM_NAME | grep Rule | grep ssh > /dev/null`; then
	    $VBM modifyvm $VM_NAME \
        	--natpf1 delete "ssh" 
    fi
    if `$VBM showvminfo $VM_NAME | grep Rule | grep docker > /dev/null`; then
	    $VBM modifyvm $VM_NAME \
        	--natpf1 delete "docker" 
    fi
    $VBM modifyvm $VM_NAME \
        --natpf1 "ssh,tcp,127.0.0.1,$SSH_HOST_PORT,,22" \
        --natpf1 "docker,tcp,127.0.0.1,$DOCKER_PORT,,$DOCKER_PORT"

    if [ ! -e $BOOT2DOCKER_ISO ]; then
        log "boot2docker.iso not found."
        download_latest
    fi

    log "Setting VM disks"
    if `$VBM showvminfo $VM_NAME | grep SATA > /dev/null`; then
        $VBM storagectl $VM_NAME --name "SATA" --remove
    fi

    if [ ! -e $VM_DISK ]; then
        log "Creating $VM_DISK_SIZE Meg hard drive..."
	# closemedium may complain when not needed
        $VBM closemedium disk $VM_DISK > /dev/null 2>&1
        $VBM createhd --format VMDK --filename $VM_DISK --size $VM_DISK_SIZE
    fi

    $VBM storagectl $VM_NAME --name "SATA" --add sata --hostiocache on
    $VBM storageattach $VM_NAME --storagectl "SATA" --port 0 --device 0 --type dvddrive --medium $BOOT2DOCKER_ISO
    $VBM storageattach $VM_NAME --storagectl "SATA" --port 1 --device 0 --type hdd --medium $VM_DISK

    log "Done."
    log "You can now type boot2docker up and wait for the VM to start."
}

do_ssh() {
pkfile=´mktemp´
umask 077
echo "-----BEGIN DSA PRIVATE KEY-----
MIIBvAIBAAKBgQCjs5tqiAMPBoRF9jUhytG1dVwDxVKH9U2tnmOCvIyZ7RVYrbw3
HqP1yGdhmua9DKpExJqTlIq/xosWqAeRZDHm9t0mFT1oW+fJytfF1LFeNujDdOIa
dE+Uh+gKqSQef0DXbdFRc7JdrG5FLriihb2r/PmrYNqAZhfnXfAZ6YZgcQIVAMlB
CZdlBCOclnLEpTWWOoDduYh5AoGBAJ3aG2EtKbJt65Jt49C3Q3v1vI/ETJ0409P6
XIjFk2p0IWOzIiLSPI4zMSkWl9bCwFcyhEN4Ngk+TSmIsamlheCpsM6tEmeHxhBn
BvV7a95IjTyiKBG+2kweMQapehpBvSnsH7/WpXNPxLhfZNq+q6vjZbPQvZ4lhqEA
7OilShIVAoGAAv8Px1V4tCJwPxnge+PTddeRNhD0Lwd6OpaKMo55u3qxpM+77M8q
84UpaNaX3dyKOHEVvoh4DvLEnAr9cPbZDG/pC39dsw8kOS/88sR+WGyu1hc05vyU
Ba8g4DSLDLFodM9KOOr33xpzISRYp0y6eyWCDlu+JE7+0kOBWMqqVicCFQCuBDEP
GcQgE6LgrKBC9bbzsgHq/w==
-----END DSA PRIVATE KEY-----
" > $pkfile
ssh -i $pkfile -p $SSH_HOST_PORT docker@localhost $1
rm $pkfile
}

start() {
    if ! is_running; then
        if is_paused; then
            log "Resuming $VM_NAME"
            $VBM controlvm $VM_NAME resume > /dev/null
            wait_vm
            log "Resumed."
        else
            log "Starting $VM_NAME..."
            $VBM startvm $VM_NAME --type headless > /dev/null &
            wait_vm
            log "Started."
        fi
    else
        log "$VM_NAME is already running."
    fi
}

wait_vm() {
    while ! echo "ping" | nc localhost $SSH_HOST_PORT > /dev/null 2>&1; do
        sleep 1
    done
}

pause() {
    if is_running; then
        log "Pausing $VM_NAME..."
        $VBM controlvm $VM_NAME pause > /dev/null
    else
        log "$VM_NAME is not running."
    fi
}

stop() {
    if is_running; then
        log "Shutting down $VM_NAME..."
        $VBM controlvm $VM_NAME poweroff > /dev/null
    else
        log "$VM_NAME is not running."
    fi
}

restart() {
    if is_running; then
        stop && sleep 1 && start
    else
        start
    fi
}

info() {
    $VBM showvminfo $VM_NAME
}

is_running() {
    info | grep "State:\s\+running" > /dev/null
}

is_paused() {
    info | grep "State:\s\+paused" > /dev/null
}

is_stopped() {
    info | grep "State:\s\+powered off" > /dev/null
}

status() {
    if is_running; then
        log "$VM_NAME is running."
        exit 0
    elif is_paused; then
        log "$VM_NAME is suspended."
        exit 1
    else
        log "$VM_NAME is stopped."
        exit 1
    fi
}

delete() {
    if ! is_stopped; then
	log "$VM_NAME needs to be stopped to delete it."
	exit 1
    fi
    $VBM unregistervm --delete $VM_NAME
}

case $1 in
    init | setup) init;;
    start | up) start;;
    pause | suspend) pause;;
    stop | halt | down) stop;;
    restart) restart;;
    status) status;;
    info) info;;
    delete) delete;;
    ssh) shift; do_ssh "$@";;
    download) download_latest;;
    *) echo "Usage $0 {init|start|up|pause|stop|restart|status|info|delete|ssh|download}"; exit 1
esac
