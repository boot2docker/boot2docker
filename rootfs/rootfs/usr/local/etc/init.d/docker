#!/bin/sh
# docker daemon start script
[ $(id -u) = 0 ] || { echo "must be root" ; exit 1; }

#import settings from profile (e.g. HTTP_PROXY, HTTPS_PROXY)
test -f "/var/lib/boot2docker/profile" && . "/var/lib/boot2docker/profile"

: ${DOCKER_HOST:="tcp://0.0.0.0:4243"}

start() {
    mkdir -p /var/lib/docker
    DOCKER_DIR="$(readlink -f /var/lib/docker)"
    
    # remove this softlink - the docker daemon recreates it and when its from the wrong os/docker version, things go boom
    rm -f "$DOCKER_DIR/lxc-start-unconfined"
    
    EXTRA_ARGS=
    
    # if we're virtual, let's listen on $DOCKER_HOST, too
    if /bin/dmesg | /bin/egrep -q '(VirtualBox|VMware|QEMU)'; then
        EXTRA_ARGS="$EXTRA_ARGS -H $DOCKER_HOST"
    fi
    
    # if /var/lib/docker is on BTRFS, let's use the native btrfs driver
    # (AUFS on top of BTRFS does very bad things)
    DOCKER_DEVICE="$(/bin/df -P "$DOCKER_DIR" | /usr/bin/awk 'END { print $1 }')"
    DOCKER_FSTYPE="$(/sbin/blkid -o export "$DOCKER_DEVICE" | /bin/grep TYPE= | /usr/bin/cut -d= -f2)"
    if [ "$DOCKER_FSTYPE" = 'btrfs' ]; then
        EXTRA_ARGS="$EXTRA_ARGS -s $DOCKER_FSTYPE"
    fi
    
    # in case TMPDIR is a symlink, too, resolve it
    export TMPDIR="$(readlink -f "${TMPDIR:-/tmp}")"
    
    /usr/local/bin/docker -d -D -g "$DOCKER_DIR" -H unix:// $EXTRA_ARGS > /var/lib/boot2docker/docker.log 2>&1 &
}

stop() {
    kill $(cat /var/run/docker.pid)
    # remove this softlink - the docker daemon recreates it and when its from the wrong os/docker version, things go boom
    rm -f /var/lib/docker/lxc-start-unconfined
}

restart() {
    if check; then
        stop && sleep 1 && start
    else
        start
    fi
}

check() {
    [ -f /var/run/docker.pid ] && ps $(cat /var/run/docker.pid) > /dev/null 2>&1
}

status() {
    if check; then
        echo "Docker daemon is running"
        exit 0
    else
        echo "Docker daemon is not running"
        exit 1
    fi
}

case $1 in
    start) start;;
    stop) stop;;
    restart) restart;;
    status) status;;
    *) echo "Usage $0 {start|stop|restart|status}"; exit 1
esac
